function rates = Plot_Spike_Rates(SPK,varargin)
%% PLOT_SPIKE_RATES Look at time-varying instantaneous firing rate estimate
%
%   rates = PLOT_SPIKE_RATES(SPK)
%
%   --------
%    INPUTS
%   --------
%      SPK      :       Table of spiking activity generated by
%                       SIMPLE_SPIKE_ANALYSIS
%
%   varargin    :       (Optional) input argument pairs.
%
%                       => 'D' (def: none; if specified, use D from
%                                          SIMPLE_SPIKE_ANALYSIS)
%                       => 'TYPE' (def: 'gauss'; can be 'tri', 'rect' or 
%                                       'gauss'. Characterizes shape of 
%                                       rate estimator kernel)
%                       => 'ENDS' (def: 0; set 0 to auto-0 ends (faster))
%                       => 'WLEN' (def: 1; number of seconds for
%                                       rate estimator kernel window)
%                       => 'FS_DEC' (def: 200; Decimated rate estimation
%                                              sampling frequency (Hz))
%                       => 'PLOT' (def: true; Whether to plot the rate
%                                             estimates after calculation)
%
%   --------
%    OUTPUT
%   --------
%    rates      :       Cell array of rates for each unit (row) of SPK.
%
%   By: Max Murphy  v1.0    05/03/2017  Original version (R2017a)
%
% See also: SIMPLE_SPIKE_ANALYSIS, LFP_SPIKE_COHERENCE, FASTSMOOTH

%% DEFAULTS
TYPE = 'gauss';     % 'rect'; 'tri'; 'gauss' (kernel type)
ENDS = 0;           % 0: set ends to 0; 1: progressively smooth ends
WLEN = 30;          % Smooth window length (seconds)
FS_DEC = 1;         % Decimated sample rate for rate estimation

% Plotting
PLOT = true;                 % Whether to plot the rates
SORTBY = 'Treatment';        % Variable in D to sort plot colors by
LINE_COL = [0.94 0.94 0.94]; % Default *unselected* line-color.
TREATCOLS = [0.4 0.4 0.8; ...
             0.4 0.8 0.4; ...
             0.8 0.4 0.4; ...
             0.1 0.1 0.1; ...
             0.8 0.8 0.4; ...
             0.8 0.4 0.8];

%% PARSE VARARGIN
for iV = 1:2:numel(varargin)
    eval([upper(varargin{iV}) '=varargin{iV+1};']);
end

%% LOOP THROUGH EACH ROW OF SPK AND COMPUTE RATES
N = size(SPK,1);
rates = cell(N,1);

h = waitbar(0,'Please wait, computing rates...');
for iN = 1:N
    ts = find(SPK.Peaks{iN})/SPK.fs(iN);
    hvec = 0:(1/FS_DEC):(numel(SPK.Peaks{iN})/SPK.fs(iN));
    wlen = round(WLEN * FS_DEC);
    hist_train = histcounts(ts,hvec);
    rates{iN} = fastsmooth(hist_train,wlen,TYPE,ENDS);
    waitbar(iN/N);
end
delete(h);

%% PLOT RATES
if PLOT
    figure('Name','IFR Estimates', ...
           'Units','Normalized', ...
           'Position', [0.1 0.1 0.8 0.8]);
       
    if ((exist('D','var')~=0) && ...
        (ismember(SORTBY,D.Properties.VariableNames)))
        nCol = numel(unique(D.(SORTBY)));
        if nCol <= size(TREATCOLS,1)
            colList  = TREATCOLS;
        else
            colList = [TREATCOLS; ...
                       rand(nCol - size(TREATCOLS,1),3)];
        end
    end
       
    for iN = 1:N
        hold on;
        if exist('D','var')==0
            name = ['Profile ' num2str(iN)];
        else
            name = [D.Block(iN,:) ...
                ' Ch ' num2str(D.Channel(iN)) '_' ...
                num2str(D.Cluster(iN))];
        end
        if exist('colList','var')==0
            col = 0.8*rand(1,3);
        else
            col = colList(strcmp(D.Treatment{iN},unique(D.Treatment)),:);
        end
        plot(linspace(0,(numel(rates{iN})-1)/FS_DEC,numel(rates{iN})), ...
             rates{iN}, ...
             'Color',LINE_COL, ...
             'LineWidth', 2, ...
             'UserData',iN, ...
             'DisplayName', name, ...
             'ButtonDownFcn', {@lineCallback,'SEL_COL',col, ...
                                             'UNSEL_COL',LINE_COL, ...
                                             'BRING_FORWARD', true});
    end
    set(gca,'UserData',N:-1:1);
    xlabel('Time (sec)');
    ylabel('Firing Rate (spikes/sec)');
    title(['Instantaneous Firing Rate (IFR; ' num2str(WLEN) ' sec ' ...
                                              TYPE ' window)']);
end


end